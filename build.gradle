buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = "https://plugins.gradle.org/m2/" }

        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        // Mixin Gradle
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// mixin
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'



version = '1.0'
group = 'hxyp.photontech' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'photontech'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'photontech', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                photontech {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Flywheel
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    mavenCentral()

    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    mavenLocal()
}

configurations {
    shade
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
    def registrate = "com.tterrag.registrate:Registrate:MC1.16.5-1.0.10"
    implementation fg.deobf(registrate)
    shade registrate

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Flywheel
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel:1.16-0.2.4.50")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "photontech",
            "Specification-Vendor": "",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'photontech.repack.registrate'
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.photontech.refmap.json'
    config 'mixins.photontech.json'

    debug.verbose = true
    debug.export = true
    quiet
}
